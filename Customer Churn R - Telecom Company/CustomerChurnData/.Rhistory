# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
library(datasets)  # Load/unload base packages manually
head(iris)
?plot  # Help for plot()
plot(iris$Species)  # Categorical variable
plot(iris$Petal.Length)  # Quantitative variable
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length, iris$Petal.Width)  # Quant pair
# Clear packages
detach("package:datasets", unload = TRUE)
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
CustomerChurn <- read.csv("D:/Project/Livingston Research/projects instructions RAW/AN20220722-595_25722_0551/CustomerChurn.csv")
View(CustomerChurn)
library(datasets)
plot(CustomerChurn)
plot(CustomerChurn$Contract, CustomerChurn$Churn)
?deprecated
ggplot2(CustomerChurn$Contract, CustomerChurn$Churn)
ggplot(CustomerChurn$Contract, CustomerChurn$Churn)
plot(CustomerChurn$Contract, CustomerChurn$Churn)
head(CustomerChurn)
plot(CustomerChurn$Contract)
plot(CustomerChurn$MonthlyCharges)
hist(CustomerChurn$MonthlyCharges)
hist(CustomerChurn$MonthlyCharges,CustomerChurn$Churn)
hist(CustomerChurn$MonthlyCharges,CustomerChurn$Churn)
plot(CustomerChurn$Churn)
plot(CustomerChurn$MonthlyCharges)
hist(CustomerChurn$MonthlyCharges)
#Load necessary library
#If the packages is not yet installed, uncomment these installation code
#install.packages("plyr")
#install.packages("pacman")
#install.packages("ggplot2")
#install.packages("corrplot")
#install.packages("MASS")
#install.packages("rpart")
#install.packages("rpart.plot")
Library(plyr)
#Load necessary library
#If the packages is not yet installed, uncomment and run these installation codes
#install.packages("plyr")
#install.packages("pacman")
#install.packages("ggplot2")
#install.packages("corrplot")
#install.packages("MASS")
#install.packages("rpart")
#install.packages("rpart.plot")
library(plyr)
library(pacman)
library(ggplot2)
library(corrplot)
library(MASS)
library(rpart)
library(rpart.plot)
setwd("C:/CustomerChurnData") #Set the working directory
custchurn <- read.csv(file = "CustomerChurn.csv") #Load the csv file and put it into variable custchurn
#Preliminary data overview & data pre-processing
str(custchurn)	#Look at the data structure
sapply(custchurn, function(x) sum(is.na(x))) #Look at missing values in the data set
custchurn <- custchurn[complete.cases(custchurn), ] #Choose only complete cases
#Change data structure for char variables to factors
#For variable SeniorCitizen, also change 0 and 1 to No and Yes
custchurn$Churn <- as.factor(custchurn$Churn)
custchurn$gender <- as.factor(custchurn$gender)
custchurn[custchurn$SeniorCitizen == 0,]$SeniorCitizen <- "no"
custchurn[custchurn$SeniorCitizen == 1,]$SeniorCitizen <- "yes"
custchurn$SeniorCitizen <- as.factor(custchurn$SeniorCitizen)
custchurn$Partner <- as.factor(custchurn$Partner)
custchurn$Dependents <- as.factor(custchurn$Dependents)
custchurn$PaperlessBilling <- as.factor(custchurn$PaperlessBilling)
custchurn$PhoneService <- as.factor(custchurn$PhoneService)
custchurn$InternetService <- as.factor(custchurn$InternetService)
custchurn$Contract <- as.factor(custchurn$Contract)
custchurn$PaymentMethod <- as.factor(custchurn$PaymentMethod)
#Remove unnecessary column: CustomersID
custchurn$customerID <- NULL
str(custchurn) #Check the data structure after pre-processing
#Exploratory Data Analysis
#Create bar graphs for each variable with response churn overview
#Create its normalized bar graphs
#Create the contingency table
#Show the table (repeat this process for each categorical variable)
ggplot(custchurn, aes(gender)) + geom_bar(aes(fill = Churn)) + coord_flip()
ggplot(custchurn, aes(gender)) + geom_bar(aes(fill = Churn), position = "fill") + coord_flip()
t.gender <- addmargins(A = table(custchurn$Churn, custchurn$gender), FUN = list(total = sum), quiet = TRUE)
t.gender
ggplot(custchurn, aes(SeniorCitizen)) + geom_bar(aes(fill = Churn)) + coord_flip()
ggplot(custchurn, aes(SeniorCitizen)) + geom_bar(aes(fill = Churn), position = "fill") + coord_flip()
t.SeniorCitizen <- addmargins(A = table(custchurn$Churn, custchurn$SeniorCitizen), FUN = list(total = sum), quiet = TRUE)
t.SeniorCitizen
ggplot(custchurn, aes(Contract)) + geom_bar(aes(fill = Churn)) + coord_flip()
#Exploratory Data Analysis
#Create bar graphs for each variable with response churn overview
#Create its normalized bar graphs
#Create the contingency table
#Show the table (repeat this process for each categorical variable)
genderplot <- ggplot(custchurn, aes(gender)) + geom_bar(aes(fill = Churn)) + coord_flip()
genderplotNorm <- ggplot(custchurn, aes(gender)) + geom_bar(aes(fill = Churn), position = "fill") + coord_flip()
t.gender <- addmargins(A = table(custchurn$Churn, custchurn$gender), FUN = list(total = sum), quiet = TRUE)
t.gender
SeniorCitizenplot <- ggplot(custchurn, aes(SeniorCitizen)) + geom_bar(aes(fill = Churn)) + coord_flip()
SeniorCitizenplotNorm <- ggplot(custchurn, aes(SeniorCitizen)) + geom_bar(aes(fill = Churn), position = "fill") + coord_flip()
t.SeniorCitizen <- addmargins(A = table(custchurn$Churn, custchurn$SeniorCitizen), FUN = list(total = sum), quiet = TRUE)
t.SeniorCitizen
Contractplot <- ggplot(custchurn, aes(Contract)) + geom_bar(aes(fill = Churn)) + coord_flip()
ContractplotNorm <- ggplot(custchurn, aes(Contract)) + geom_bar(aes(fill = Churn), position = "fill") + coord_flip()
t.Contract <- addmargins(A = table(custchurn$Churn, custchurn$Contract), FUN = list(total = sum), quiet = TRUE)
t.Contract
Dependentsplot <- ggplot(custchurn, aes(Dependents)) + geom_bar(aes(fill = Churn)) + coord_flip()
DependentsplotNorm <- ggplot(custchurn, aes(Dependents)) + geom_bar(aes(fill = Churn), position = "fill") + coord_flip()
t.Dependents <- addmargins(A = table(custchurn$Churn, custchurn$Dependents), FUN = list(total = sum), quiet = TRUE)
t.Dependents
PhoneServiceplot <- ggplot(custchurn, aes(PhoneService)) + geom_bar(aes(fill = Churn)) + coord_flip()
PhoneServiceplotNorm <- ggplot(custchurn, aes(PhoneService)) + geom_bar(aes(fill = Churn), position = "fill") + coord_flip()
t.PhoneService <- addmargins(A = table(custchurn$Churn, custchurn$PhoneService), FUN = list(total = sum), quiet = TRUE)
t.PhoneService
InternetServiceplot <- ggplot(custchurn, aes(InternetService)) + geom_bar(aes(fill = Churn)) + coord_flip()
InternetServiceplotNorm <- ggplot(custchurn, aes(InternetService)) + geom_bar(aes(fill = Churn), position = "fill") + coord_flip()
t.InternetService <- addmargins(A = table(custchurn$Churn, custchurn$InternetService), FUN = list(total = sum), quiet = TRUE)
t.InternetService
Partnerplot <- ggplot(custchurn, aes(Partner)) + geom_bar(aes(fill = Churn)) + coord_flip()
PartnerplotNorm <- ggplot(custchurn, aes(Partner)) + geom_bar(aes(fill = Churn), position = "fill") + coord_flip()
t.Partner <- addmargins(A = table(custchurn$Churn, custchurn$Partner), FUN = list(total = sum), quiet = TRUE)
t.Partner
PaperlessBillingplot <- ggplot(custchurn, aes(PaperlessBilling)) + geom_bar(aes(fill = Churn)) + coord_flip()
PaperlessBillingplotNorm <- ggplot(custchurn, aes(PaperlessBilling)) + geom_bar(aes(fill = Churn), position = "fill") + coord_flip()
t.PaperlessBilling <- addmargins(A = table(custchurn$Churn, custchurn$PaperlessBilling), FUN = list(total = sum), quiet = TRUE)
t.PaperlessBilling
PaymentMethodplot <- ggplot(custchurn, aes(PaymentMethod)) + geom_bar(aes(fill = Churn)) + coord_flip()
PaymenMethodplotNorm <- ggplot(custchurn, aes(PaymentMethod)) + geom_bar(aes(fill = Churn), position = "fill") + coord_flip()
t.PaymentMethod <- addmargins(A = table(custchurn$Churn, custchurn$PaymentMethod), FUN = list(total = sum), quiet = TRUE)
t.PaymentMethod
#Create histogram for numerical variables and its churn overlay
#Create its normalized histogram
#Get a summary of numerical variables and make sure there are no outliers
tenureplot <- ggplot(custchurn, aes(tenure)) + geom_histogram(aes(fill = Churn), color="black")
tenureplotNorm <- ggplot(custchurn, aes(tenure)) + geom_histogram(aes(fill = Churn), color="black", position = "fill")
summary(custchurn$tenure)
MonthlyChargesplot <- ggplot(custchurn, aes(MonthlyCharges)) + geom_histogram(aes(fill = Churn), color="black")
MonthlyChargesplotNorm <- ggplot(custchurn, aes(MonthlyCharges)) + geom_histogram(aes(fill = Churn), color="black", position = "fill")
summary(custchurn$MonthlyCharges)
TotalChargesplot <- ggplot(custchurn, aes(TotalCharges)) + geom_histogram(aes(fill = Churn), color="black")
TotalChargesplotNorm <- ggplot(custchurn, aes(TotalCharges)) + geom_histogram(aes(fill = Churn), color="black", position = "fill")
summary(custchurn$TotalCharges)
genderplot
genderplotNorm
SeniorCitizenplot
SeniorCitizenplotNorm
#Correlation between numerical variables
numeric.var <- sapply(custchurn, is.numeric)
corr.matrix <- cor(custchurn[,numeric.var])
corrplot(corr.matrix, main="\n\nCorrelation Plot for Numerical Variables", method="number")
corr.matrixplot <- corrplot(corr.matrix, main="\n\nCorrelation Plot for Numerical Variables", method="number")
#Data partition for Logistic Regression
set.seed(1027) #Using birthday date 10/27
n <- dim(custchurn) [1]
training<- custchurn[train_ind,]
train_ind <- runif(n) < 0.7
training<- custchurn[train_ind,]
testing<- custchurn[!train_ind,]
#Logistic regression
#Fitting the logistic regression model
LogRegModel <- glm(Churn ~ .,family=binomial(link="logit"),data=training)
print(summary(LogRegModel))
#Create another fitting, but only use variables that has higher significance
LogRegModel2 <- glm(Churn ~ tenure+InternetService+Contract+PaymentMethod+TotalCharges,family=binomial(link="logit"),data=training)
print(summary(LogRegModel2))
#Anova analysis for two models as well as random model
anova(LogRegModel, LogRegModel2, test="Chisq")
LogRegModel0 <- glm(Churn ~ 1,family=binomial(link=logit),data=training)
anova(LogRegModel, LogRegModel0, test="Chisq")
anova(LogRegModel2, LogRegModel0, test="Chisq")
#Evaluating the predictive ability of the first model using testing dataset
LogRegModel.pred <- predict(LogRegModel, testing, type='response')
LogRegModel.pred <- ifelse(LogRegModel.pred > 0.5,"Yes","No")
misClasificError <- mean(LogRegModel.pred != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
#Evaluating the predictive ability of the second model using testing dataset
LogRegModel2.pred <- predict(LogRegModel2, testing, type='response')
LogRegModel2.pred <- ifelse(LogRegModel2.pred > 0.5, "Yes","No")
misClasificError <- mean(LogRegModel2.pred != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
print("Confusion Matrix for Logistic Regression");
#Evaluating the predictive ability of the second model using testing dataset
LogRegModel2.pred <- predict(LogRegModel2, testing, type='response')
LogRegModel2.pred <- ifelse(LogRegModel2.pred > 0.5, "Yes","No")
misClasificError <- mean(LogRegModel2.pred != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
confmatrix1 <- table(testing$Churn, LogRegModel.pred)
confmatrix1
confmatrix2 <- table(testing$Churn, LogRegModel2.pred)
confmatrix2
#Odds Ratio
exp(cbind(OR=coef(LogRegModel), confint(LogRegModel)))
exp(cbind(OR=coef(LogRegModel2), confint(LogRegModel2)))
#Decision Tree
#Create decision tree using all variables in training dataset
tree <- rpart(Churn ~ . , training)
treeplot <- rpart.plot(tree, extra=3)
treeplot
summary(tree)
tenureplotNorm <- ggplot(custchurn, aes(tenure)) + geom_histogram(aes(fill = Churn), color="black", position = "fill")
tenureplot
treeplot
treeplot <- rpart.plot(tree, extra=3)
summary(tree)
summary(tree)
print("Confusion Matrix for Decision Tree"); table(Predicted = pred_tree, Actual = testing$Churn)
#Create prediction tree using testing dataset
pred_tree <- predict(tree, testing, type="class")
print("Confusion Matrix for Decision Tree"); table(Predicted = pred_tree, Actual = testing$Churn)
#Evaluating the Decision Tree accuracy
p1 <- predict(tree, training, type="class")
tab1 <- table(Predicted = p1, Actual = training$Churn)
tab2 <- table(Predicted = pred_tree, Actual = testing$Churn)
print(paste('Decision Tree Accuracy',sum(diag(tab2))/sum(tab2)))
load("C:/CustomerChurnData/Final_Group#.RData")
LogRegModel0.pred <- predict(LogRegModel0, testing, type='response')
LogRegModel0.pred <- ifelse(LogRegModel0.pred > 0.5, "Yes","No")
misClasificError <- mean(LogRegModel0.pred != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
head(testing)
model1.AUC <- colAUC(LogRegModel.pred, testing$Churn, plotROC = T)
#Load necessary library
#If the packages is not yet installed, uncomment and run these installation codes
#install.packages("plyr")
#install.packages("pacman")
#install.packages("ggplot2")
#install.packages("corrplot")
#install.packages("MASS")
#install.packages("rpart")
#install.packages("rpart.plot")
#install.packages("caTools")
library(plyr)
#Load necessary library
#If the packages is not yet installed, uncomment and run these installation codes
#install.packages("plyr")
#install.packages("pacman")
#install.packages("ggplot2")
#install.packages("corrplot")
#install.packages("MASS")
#install.packages("rpart")
#install.packages("rpart.plot")
install.packages("caTools")
library(caTools)
model1.AUC <- colAUC(LogRegModel.pred, testing$Churn, plotROC = T)
#Evaluating the predictive ability of the first model using testing dataset
LogRegModel.pred <- predict(LogRegModel, testing, type='response')
model1.AUC <- colAUC(LogRegModel.pred, testing$Churn, plotROC = T)
abline(h=model1.AUC, col= 'Green')
text(.2,.9,cex=.8, labels = paste("Optimal Cutoff:", round(model1.AUC,3)))
LogRegModel.pred1 <- ifelse(LogRegModel.pred > 0.85,"Yes","No")
misClasificError <- mean(LogRegModel.pred != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
misClasificError <- mean(LogRegModel.pred1 != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
#Evaluating the predictive ability of the second model using testing dataset
LogRegModel2.pred <- predict(LogRegModel2, testing, type='response')
LogRegModel2.pred1 <- ifelse(LogRegModel2.pred > 0.5, "Yes","No")
misClasificError <- mean(LogRegModel2.pred1 != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
model2.AUC <- colAUC(LogRegModel2.pred, testing$Churn, plotROC = T)
abline(h=model1.AUC, col= 'Green')
text(.2,.9,cex=.8, labels = paste("Optimal Cutoff:", round(model1.AUC,3)))
LogRegModel2.pred1 <- ifelse(LogRegModel2.pred > 0.85, "Yes","No")
misClasificError <- mean(LogRegModel2.pred1 != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
load("C:/CustomerChurnData/Final_Group#.RData")
confmatrix1
confmatrix2
#End
(412+78)/(412+78+32+83)
library(caTools)
#Evaluating the predictive ability of the first model using testing dataset
LogRegModel.prob <- predict(LogRegModel, testing, type='response')
LogRegModel.pred <- ifelse(LogRegModel.prob > 0.5,"Yes","No")
misClasificError <- mean(LogRegModel.pred != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
confmatrix1 <- table(testing$Churn, LogRegModel.pred)
confmatrix1
model1.AUC <- colAUC(LogRegModel.prob, testing$churn, plotROC = T)
model1.AUC <- colAUC(LogRegModel.prob, testing$Churn, plotROC = T)
plotROC(LogRegModel.prob, testing$Churn)
library(ggplot2)
load("C:/CustomerChurnData/Final_Group#.RData")
#Load necessary library
#If the packages is not yet installed, uncomment and run these installation codes
#install.packages("plyr")
#install.packages("pacman")
#install.packages("ggplot2")
#install.packages("corrplot")
#install.packages("MASS")
#install.packages("rpart")
#install.packages("rpart.plot")
install.packages("PRROC")
library(PRROC)
#Evaluating the predictive ability of the first model using testing dataset
LogRegModel.odds <- predict(LogRegModel, testing, type='response')
LogRegModel.pred <- ifelse(LogRegModel.odds > 0.5,"Yes","No")
misClasificError <- mean(LogRegModel.pred != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
confmatrix1 <- table(testing$Churn, LogRegModel.pred)
confmatrix1
roc1 <- roc.curve(LogRegModel.odds, testing$Churn)
plot(roc1)
roc1 <- roc.curve(LogRegModel.odds, testing$Churn, curve = T)
plot(roc1)
roc1 <- roc.curve(LogRegModel.pred, testing$Churn, curve = T)
plot(roc1)
str(testing$Churn)
testing[testing$Churn == "No",]$Churn <- 0
testing[testing$Churn == "Yes",]$Churn <- 1
str(testing$Churn)
#Data partition for Logistic Regression
set.seed(1027) #Using birthday date 10/27
n <- dim(custchurn) [1]
train_ind <- runif(n) < 0.7
training<- custchurn[train_ind,]
testing<- custchurn[!train_ind,]
str(testing$Churn)
roc1 <- roc.curve(LogRegModel.odds, curve = T)
plot(roc1)
#Evaluating the predictive ability of the first model using testing dataset
LogRegModel.odds <- predict(LogRegModel, testing, type='response')
roc1 <- roc.curve(LogRegModel.odds, curve = T)
plot(roc1)
LogRegModel.predict <- ifelse(LogRegModel.odds > 0.5,1,0)
roc1 <- roc.curve(LogRegModel.predict, testing$Churn , curve = T)
plot(roc1)
testing[testing$Churn == 1,]$Churn <- 0
testing[testing$Churn == 2,]$Churn <- 1
str(testing$Churn)
LogRegModel.predict <- ifelse(LogRegModel.odds > 0.5,2,1)
roc1 <- roc.curve(LogRegModel.predict, testing$Churn , curve = T)
plot(roc1)
#End
rm()
rm(list(ls()))
