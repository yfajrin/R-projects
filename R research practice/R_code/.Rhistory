geom_smooth(method = "lm") +
ggtitle("Relationship between Distance and each variable") +
xlab("Distance") + ylab("Value")
#plot the relationship between Distance and each variable
ggplot(data_long, aes(x = Distance, y = Values, color = Variables,
shape = Variables)) + geom_point()
data_long
#plot the relationship between Distance and each variable
ggplot(data_long, aes(x = Distance, y = Value, color = Variables,
shape = Variables)) +
geom_point(size = 2) + facet_grid(rows=vars(Variables)) +
geom_smooth(method = "lm") +
ggtitle("Relationship between Distance and each variable") +
xlab("Distance") + ylab("Value")
#plot the relationship between Distance and each variable
ggplot(data_long, aes(x = Distance, y = Value, color = Variables,
shape = Variables)) +
geom_point(size = 2) + facet_grid(rows=vars(Variables), scales="free") +
geom_smooth(method = "lm") +
ggtitle("Relationship between Distance and each variable") +
xlab("Distance") + ylab("Value")
#plot the relationship between Distance and each variable
ggplot(data_long, aes(x = Distance, y = Value, color = Variables,
shape = Variables)) +
geom_point(size = 2) + facet_grid(rows=vars(Variables), scales="free") +
geom_smooth(method = "lm") +
ggtitle("Relationship between Distance and each variable") +
xlab("Distance") + ylab("Value")
ggplot(data_all, aes(x = Duration, y = Rate, color = Distance)) +
geom_point(size = 2) +
geom_smooth(method = "lm") +
ggtitle("Relationship between Rate and Duration based on Distance") +
xlab("Duration") + ylab("Rate")
#clear the environment
rm(list=ls())
#set the library that will be used
library(tidyr)
library(ggplot2)
library(dplyr)
#read the relevant data in the working directory and put it into each variable
probability <- read.csv('rattle_probability.csv')
duration <- read.csv('rattle_duration.csv')
rate <- read.csv('rattle_rate.csv')
probability
duration
rate
#renaming the column with more manageable names: Distance, Probability, Duration, Rate
colnames(probability) <- c("Species", "Distance","Probability")
colnames(duration) <- c("Species", "Distance","Duration")
colnames(rate) <- c("Species", "Distance","Rate")
#remove rows with NA using slice() function
probability_clean <- slice(probability, which((Distance!=NA)| !is.na(Distance)))
#remove rows with NA using slice() function
probability_clean <- slice(probability, which(Distance!=NA)
#remove rows with NA using slice() function
probability_clean <- slice(probability, which(Distance!=NA))
probability_clean
duration_clean <- slice(duration, which((Distance!=NA)| !is.na(Distance)))
#remove rows with NA using slice() function
probability_clean <- slice(probability, which((Distance!=NA)| !is.na(Distance)))
probability_clean
duration_clean <- slice(duration, which((Distance!=NA)| !is.na(Distance)))
duration_clean
rate_clean <- slice(rate, which((Distance!=NA)| !is.na(Distance)))
rate_clean
#remove rows with NA using slice() function
probability_clean <- slice(probability, which(Distance!=NA))
| !is.na(Distance)
#remove rows with NA using slice() function
probability_clean <- slice(probability, which((Distance!=NA)| !is.na(Distance)))
probability_clean
#check whether the first data of the initial and the cleaned is the same
#since the first start at the second row, then we use slice(dataframe, 2) to target it
slice(probability, 2) == slice_head(probability_clean) #return TRUE
slice(duration, 2) == slice_head(duration_clean) #return TRUE
slice(rate, 2) == slice_head(rate_clean) #return TRUE
#check whether the last data of the initial and the cleaned is the same
slice_tail(probability) == slice_tail(probability_clean) #return TRUE
slice_tail(duration) == slice_tail(duration_clean) #return TRUE
slice_tail(rate) == slice_tail(rate_clean) #return TRUE
#join the three tibbles
data1 <- left_join(probability_clean, duration_clean, by=c('Species'='Species', 'Distance'='Distance'))
data_all <- left_join(data1, rate_clean, by=c('Species'='Species', 'Distance'='Distance'))
#inspect joined data_all
data_all
sum(is.na(data_all$Probability))
sum(is.na(data_all$Duration))
sum(is.na(data_all$Rate))
summary(data_all)
#convert the data into long format
data_long <- gather(data_all, Variables, Value, Probability:Rate, factor_key=TRUE)
data_long
#plot the relationship between Distance and each variable, save it to distance_vs_variable
distance_vs_variable <- ggplot(data_long, aes(x = Distance, y = Value, color = Variables,
shape = Variables)) +
geom_point(size = 2) +
facet_grid(rows=vars(Variables), scales="free") +
geom_smooth(method = "lm") +
ggtitle("Relationship between Distance and each variable") +
xlab("Distance") + ylab("Value")
distance_vs_variable
#using the wide data format, plot the rate as a function of duration, and color it by distance, save it to duration_vs_rate
rate_vs_duration <- ggplot(data_all, aes(x = Duration, y = Rate, color = Distance)) +
geom_point(size = 2) +
geom_smooth(method = "lm") +
ggtitle("Relationship between Rate and Duration based on Distance") +
xlab("Duration") + ylab("Rate")
rate_vs_duration
save.image("C:/dataset/Rattle_behavioral_plasticity.RData")
#clear the environment
rm(list=ls())
#set the library that will be used
library(tidyr)
library(ggplot2)
library(dplyr)
#read the dataset
gallfly <- read.table('gallfly_mating.xlsx')
#set the library that will be used
install.packages('readxl')
library(readxl)
#read the dataset
gallfly <- read_excel('gallfly_mating.xlsx')
#read the dataset
gallfly <- read_excel('gallfly_mating.xlsx', na='NA')
str(gallfly)
summary(gallfly)
sum(is.na(gallfly))
#examine the data
gallfly
gallfly$fly_id[gallfly$fly_id$Freq > 1,]
gallfly$fly_id[Freq > 1,]
#
duplicated(gallfly$fly_id)
#fix the second error, remove NA by only selecting the complete cases
gallfly <- gallfly[complete.cases(gallfly), ]
#fix the first error
gallfly$plot <- as.numeric(gallfly$plot)
#examine the data
gallfly
#read the dataset
gallfly <- read_excel('gallfly_mating.xlsx', na='NA')
gallfly$plot[gallfly$plot == 'plot 1'] <- 1
gallfly$plot[gallfly$plot == 'plot 2'] <- 2
gallfly$plot[gallfly$plot == 'plot 3'] <- 3
gallfly$plot <- as.numeric(gallfly$plot)
str(gallfly)
#fix the second error, remove NA by only selecting the complete cases
gallfly <- gallfly[complete.cases(gallfly), ]
#fix the third error
gallfly$plant_choice[gallfly$plant_choice == 'ALT'] <- 'Alt'
gallfly$plant_choice[gallfly$plant_choice == 'GIG'] <- 'Gig'
gallfly$plant_choice[gallfly$plant_choice == 'Gigantia'] <- 'Gig'
gallfly$plant_choice <- as.factor(gallfly$plant_choice)
gallfly$host_race <- as.factor(gallfly$host_race)
str(gallfly)
write.csv(gallfly, "\\gallfly_cleaned.csv", row.names=FALSE)
write.csv(gallfly, "gallfly_cleaned.csv", row.names=FALSE)
nrow(gallfly[(gallfly$host_race == 'Alt' & gallfly$plant_choice == 'Alt', ) | (gallfly$host_race == 'Gig' & gallfly$plant_choice == 'Gig', )])
nrow(gallfly[gallfly$host_race == 'Alt' & gallfly$plant_choice == 'Alt',])
nrow(gallfly[gallfly$host_race == 'Gig' & gallfly$plant_choice == 'Gig',])
nrow(gallfly[gallfly$host_race == 'Alt' & gallfly$plant_choice == 'Gig',])
nrow(gallfly[gallfly$host_race == 'Gig' & gallfly$plant_choice == 'Alt',])
same_alt <- nrow(gallfly[gallfly$host_race == 'Alt' & gallfly$plant_choice == 'Alt',])
same_gig <- nrow(gallfly[gallfly$host_race == 'Gig' & gallfly$plant_choice == 'Gig',])
same <- same_alt + same_gig
dif_alt <- nrow(gallfly[gallfly$host_race == 'Alt' & gallfly$plant_choice == 'Gig',])
dif_gig <- nrow(gallfly[gallfly$host_race == 'Gig' & gallfly$plant_choice == 'Alt',])
dif <- dif_alt + dif_gig
install.packages('knitr')
library(knitr)
gallcounts <- data.frame(c(same_alt, dif_alt, same_gig, dif_gig))
gallcounts <- data.frame(count = c(same_alt, dif_alt, same_gig, dif_gig))
gall_counts <- data.frame(count = c(same_alt, dif_alt, same_gig, dif_gig))
gall_counts <- as_tibble(count = c(same_alt, dif_alt, same_gig, dif_gig))
gall_counts <- as_tibble(gall_counts)
knitr::kable(gall_counts)
gall_counts <- data.frame(count = c(same_alt, dif_alt, same_gig, dif_gig),
host_race = c('Alt', 'Alt', 'Gig', 'Gig'),
plant_choice = c('Alt', 'Gig', 'Gig', 'Alt'))
gall_counts <- as_tibble(gall_counts)
knitr::kable(gall_counts)
gall_counts <- data.frame(host_race = c('Alt', 'Alt', 'Gig', 'Gig'),
plant_choice = c('Alt', 'Gig', 'Gig', 'Alt'),
count = c(same_alt, dif_alt, same_gig, dif_gig))
gall_counts <- as_tibble(gall_counts)
knitr::kable(gall_counts)
gall_counts$proportion <- gall_counts$count/rowSums(gall_counts$count)
gall_counts$proportion <- gall_counts$count/rowSum(gall_counts$count)
gall_counts$proportion <- gall_counts$count/colSums(gall_counts$count)
gall_counts$proportion <- proportion(gall_counts$count)
gall_counts$proportion <- prop(gall_counts$count)
gall_counts$proportion <- prop.table(gall_counts$count, 2)
gall_counts$proportion <- prop.table(gall_counts, 2)
gall_counts$proportion <- gall_counts$count/colSums(gall_counts)
gall_counts$proportion <- gall_counts$count/colSums(gall_counts$count)
gall_counts$proportion <- gall_counts$count/colSums(gall_counts[3])
knitr::kable(gall_counts)
N_alt <- gall_counts %>%
filter(host_race == "Alt") %>%
summarize(sum(n)) %>%
pull()
N_alt <- gall_counts %>%
filter(host_race == "Alt") %>%
summarize(sum(n)) %>%
pull()
rbinom(1, 33 ,0.5)
rbinom(1, 33 ,0.5)
N_alt <- gall_counts %>%
filter(host_race == "Alt") %>%
summarize(sum()) %>%
pull()
rbinom(2,33,0.5)
rbinom(1000, 33, 0.5)
N_alt
N_alt <- gall_counts %>%
filter(host_race == "Alt") %>%
summarize(sum(n)) %>%
pull()
gall_counts
N_alt <- gall_counts %>%
filter(host_race == "Alt") %>%
summarize(sum(count)) %>%
pull()
N_alt
altissima <- rbinom(1000, 33, 0.5)
ggplot(altissima) +
geom_histogram(fill = "blue") +
ggtitle("Histogram of the number of Flies from Altissima and oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima <- as_tibble(altissima)
ggplot(altissima) +
geom_histogram(fill = "blue") +
ggtitle("Histogram of the number of Flies from Altissima and oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
ggplot(altissima) +
geom_histogram() +
ggtitle("Histogram of the number of Flies from Altissima and oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
ggplot(altissima) +
geom_histogram()
altissima
ggplot(altissima) +
aes(x = value)
ggplot(altissima) +
aes(x = value) +
geom_histogram() +
ggtitle("Histogram of the number of Flies from Altissima and oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima_plot <- ggplot(altissima) +
aes(x = value) +
geom_histogram(fill = 'blue') +
ggtitle("Histogram of the number of Flies from Altissima and oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima_plot
N_gig <- gall_counts %>%
filter(host_race == "Gig") %>%
summarize(sum(count)) %>%
pull()
N_gig
altissima_random <- rbinom(1000, 33, 0.5)
altissima_random <- as_tibble(altissima_random)
altissima_random
altissima_plot <- ggplot(altissima_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
ggtitle("Histogram of the number of Flies from Altissima and oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima_plot
altissima_random <- rbinom(1000, N_alt, 0.5)
altissima_random <- as_tibble(altissima_random)
altissima_random
altissima_plot <- ggplot(altissima_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
ggtitle("Histogram of the number of Flies from Altissima and oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima_plot
N_gig <- gall_counts %>%
filter(host_race == "Gig") %>%
summarize(sum(count)) %>%
pull()
N_gig
gigantia_random <- rbinom(1000, N_gig, 0.5)
gigantia_random <- as_tibble(gigantia_random)
gigantia_random
gigantia_plot <- ggplot(gigantia_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
ggtitle("Histogram of the number of Flies from Gigantia and oviposited in Gigantia") +
xlab("Number of Flies") + ylab("Count")
altissima_plot
gigantia_plot
install.packages('cowplot')
library(cowplot)
plot.grid(altissima_plot_random, gigantia_plot_random)
plot_grid(altissima_plot_random, gigantia_plot_random)
altissima_plot_random <- ggplot(altissima_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
ggtitle("Histogram of the number of Flies from Altissima and oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima_plot_random
plot_grid(altissima_plot_random, gigantia_plot_random)
gigantia_plot_random <- ggplot(gigantia_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
ggtitle("Histogram of the number of Flies from Gigantia and oviposited in Gigantia") +
xlab("Number of Flies") + ylab("Count")
gigantia_plot_random
plot_grid(altissima_plot_random, gigantia_plot_random)
gigantia_plot_random <- ggplot(gigantia_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
geom_density() +
ggtitle("Histogram of the number of Flies from Gigantia and oviposited in Gigantia") +
xlab("Number of Flies") + ylab("Count")
gigantia_plot_random
gigantia_plot_random <- ggplot(gigantia_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
geom_density() +
ggtitle("Histogram of the number of Flies from Gigantia and oviposited in Gigantia") +
xlab("Number of Flies") + ylab("Count")
gigantia_plot_random
ggplot(gigantia_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
geom_density() +
ggtitle("Histogram of the number of Flies from Gigantia and oviposited in Gigantia") +
xlab("Number of Flies") + ylab("Count")
gigantia_plot_random <- ggplot(gigantia_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
geom_density() +
ggtitle("Histogram of the number of Flies from Gigantia and oviposited in Gigantia") +
xlab("Number of Flies") + ylab("Count")
gigantia_plot_random
altissima_plot_random <- ggplot(altissima_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
geom_density() +
ggtitle("Histogram of the number of Flies from Altissima which oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima_plot_random
altissima_plot_random <- ggplot(altissima_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
geom_density(colour = 2) +
ggtitle("Histogram of the number of Flies from Altissima which oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima_plot_random
altissima_plot_random <- ggplot(altissima_random) +
aes(x = value) +
geom_histogram(aes(y = ..density..), fill = 'blue') +
geom_density(aescolour = 2) +
ggtitle("Histogram of the number of Flies from Altissima which oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima_plot_random <- ggplot(altissima_random) +
aes(x = value) +
geom_histogram(aes(y = ..density..), fill = 'blue') +
geom_density(colour = 2) +
ggtitle("Histogram of the number of Flies from Altissima which oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima_plot_random
altissima_plot_random <- ggplot(altissima_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
ggtitle("Histogram of the number of Flies from Altissima which oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima_plot_random
gigantia_plot_random <- ggplot(gigantia_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
ggtitle("Histogram of the number of Flies from Gigantia which oviposited in Gigantia") +
xlab("Number of Flies") + ylab("Count")
gigantia_plot_random
plot_grid(altissima_plot_random, gigantia_plot_random)
plot_grid(altissima_plot_random, gigantia_plot_random, ncol = 1, align = "v")
probability_dif <- dbinom(dif_alt, size = N_alt, prob=0.5)
probability_dif
probability_dif_gig <- dbinom(dif_gig, size = N_gig, prob=0.5)
probability_dif_gig
probability_dif <- probability_dif_alt + probability_dif_gig
probability_dif_alt <- dbinom(dif_alt, size = N_alt, prob=0.5)
probability_dif_alt
probability_dif_gig <- dbinom(dif_gig, size = N_gig, prob=0.5)
probability_dif_gig
probability_dif <- probability_dif_alt + probability_dif_gig
probability_dif
probability_dif_alt_cumulative <- pbinom(dif_alt, size = N_alt, prob=0.5)
probability_dif_alt_cumulative
probability_dif_gig_cumulative <- dbinom(dif_gig, size = N_gig, prob=0.5)
probability_dif_gig_cumulative
probability_dif_cumulative <- probability_dif_alt_cumulative + probability_dif_gig_cumulative
probability_dif_cumulative
#clear the environment
rm(list=ls())
#set the library that will be used, install the packages if it is not yet installed
library(tidyr)
library(ggplot2)
library(dplyr)
library(readxl)
library(knitr)
library(cowplot)
#read the dataset
gallfly <- read_excel('gallfly_mating.xlsx', na='NA')
#examine the dataset
#examine the data type of each column
str(gallfly)
#examine the number of NA in the data
sum(is.na(gallfly))
#examine the data
gallfly
#check whether there are duplicated fly_id, since it should all be unique
duplicated(gallfly$fly_id)
#fix the first error
gallfly$plot[gallfly$plot == 'plot 1'] <- 1
gallfly$plot[gallfly$plot == 'plot 2'] <- 2
gallfly$plot[gallfly$plot == 'plot 3'] <- 3
gallfly$plot <- as.numeric(gallfly$plot)
str(gallfly)
#fix the second error, remove NA by only selecting the complete cases
gallfly <- gallfly[complete.cases(gallfly), ]
#fix the third error
gallfly$plant_choice[gallfly$plant_choice == 'ALT'] <- 'Alt'
gallfly$plant_choice[gallfly$plant_choice == 'GIG'] <- 'Gig'
gallfly$plant_choice[gallfly$plant_choice == 'Gigantia'] <- 'Gig'
gallfly$plant_choice <- as.factor(gallfly$plant_choice)
gallfly$host_race <- as.factor(gallfly$host_race)
str(gallfly)
#write the cleaned data to gallfly_cleaned.csv and put it into the working directory
write.csv(gallfly, "gallfly_cleaned.csv", row.names=FALSE)
same_alt <- nrow(gallfly[gallfly$host_race == 'Alt' & gallfly$plant_choice == 'Alt',])
#count the gigantia fly which oviposited in gigantia, same host_race and plant_choice
same_gig <- nrow(gallfly[gallfly$host_race == 'Gig' & gallfly$plant_choice == 'Gig',])
#sum the result which will shows the number of flies with host_race equal to plant_choice
same <- same_alt + same_gig
same
#count the altissima fly which oviposited in gigantia, different host_race and plant_choice
dif_alt <- nrow(gallfly[gallfly$host_race == 'Alt' & gallfly$plant_choice == 'Gig',])
#count the gigantia fly which oviposited in altissima, different host_race and plant_choice
dif_gig <- nrow(gallfly[gallfly$host_race == 'Gig' & gallfly$plant_choice == 'Alt',])
#sum the result which will shows the number of flies with host_race different to plant_choice
dif <- dif_alt + dif_gig
#create a tibble called gall_counts to show the result above
gall_counts <- data.frame(host_race = c('Alt', 'Alt', 'Gig', 'Gig'),
plant_choice = c('Alt', 'Gig', 'Gig', 'Alt'),
count = c(same_alt, dif_alt, same_gig, dif_gig))
gall_counts <- as_tibble(gall_counts)
knitr::kable(gall_counts)
#create another column to show the proportion of the count
gall_counts$proportion <- gall_counts$count/colSums(gall_counts[3])
knitr::kable(gall_counts)
#calculate all Alt host race
N_alt <- gall_counts %>%
filter(host_race == "Alt") %>%
summarize(sum(count)) %>%
pull()
N_alt
#create a tibble of the expected number of altissima flies oviposited in altissima if it chooses randomly
#and it is calculated on 1000 occasions
altissima_random <- rbinom(1000, N_alt, 0.5)
altissima_random <- as_tibble(altissima_random)
altissima_random
#create a histogram to show the result above
altissima_plot_random <- ggplot(altissima_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
ggtitle("Histogram of the number of Flies from Altissima which oviposited in Altissima") +
xlab("Number of Flies") + ylab("Count")
altissima_plot_random
#calculate all Gig host race
N_gig <- gall_counts %>%
filter(host_race == "Gig") %>%
summarize(sum(count)) %>%
pull()
N_gig
#create a tibble of the expected number of gigantia flies oviposited in gigantia if it chooses randomly
#and it is calculated on 1000 occasions
gigantia_random <- rbinom(1000, N_gig, 0.5)
gigantia_random <- as_tibble(gigantia_random)
gigantia_random
#create a histogram to show the result above, save it to gigantia_plot_random
gigantia_plot_random <- ggplot(gigantia_random) +
aes(x = value) +
geom_histogram(fill = 'blue') +
ggtitle("Histogram of the number of Flies from Gigantia which oviposited in Gigantia") +
xlab("Number of Flies") + ylab("Count")
gigantia_plot_random
#create a plot grid to compare two histogram plots above
plot_grid(altissima_plot_random, gigantia_plot_random, ncol = 1, align = "v")
#calculate the probability of  observing exactly the number of choices of the alternate host plant if the flies are actually choosing randomly
#for altissima
probability_dif_alt <- dbinom(dif_alt, size = N_alt, prob=0.5)
probability_dif_alt
#for gigantia
probability_dif_gig <- dbinom(dif_gig, size = N_gig, prob=0.5)
probability_dif_gig
#for both
probability_dif <- probability_dif_alt + probability_dif_gig
probability_dif
#calculate the probability of observing the number of choices of the alternate host plant or any count lower than observed, if the flies are actually choosing randomly
#for altissima
probability_dif_alt_cumulative <- pbinom(dif_alt, size = N_alt, prob=0.5)
probability_dif_alt_cumulative
#for gigantia
probability_dif_gig_cumulative <- dbinom(dif_gig, size = N_gig, prob=0.5)
probability_dif_gig_cumulative
#for both
probability_dif_cumulative <- probability_dif_alt_cumulative + probability_dif_gig_cumulative
probability_dif_cumulative
save.image("C:/dataset/Goldenrod_gallflies.RData")
